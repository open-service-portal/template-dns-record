# GitHub Actions workflow to build and publish Crossplane Configuration packages
name: Release Configuration Package

on:
  # Trigger on version tags
  push:
    tags:
      - 'v*.*.*'  # Semantic version tags (e.g., v1.0.0, v2.1.3)

  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to use (e.g., v1.0.0)'
        required: true
        default: 'v0.0.0-pre'

jobs:
  vars:
    name: Gather environment information
    runs-on: ubuntu-latest

    # Job outputs allow to pass values to reusable workflows
    outputs:
      registry: ${{ steps.set-vars.outputs.registry }}
      organisation: ${{ steps.set-vars.outputs.organisation }}
      name: ${{ steps.set-vars.outputs.name }}
      version: ${{ steps.set-vars.outputs.version }}
    
    steps:
      - id: set-vars
        run: |
          echo "registry=ghcr.io" >> $GITHUB_OUTPUT
          echo "organisation=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          echo "name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  build:
    name: Build and Push Configuration Package
    runs-on: ubuntu-latest
    needs: vars

    permissions:
      packages: write # For pushing to GitHub Container Registry

    env:
      VERSION: ${{ needs.vars.outputs.version }}
      PKG_PATH: ${{ needs.vars.outputs.registry }}/${{ needs.vars.outputs.organisation }}/${{ needs.vars.outputs.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Enable multi-platform builds
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.vars.outputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Crossplane CLI
        run: |
          # Install latest Crossplane CLI
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv crossplane /usr/local/bin/
          # Ignore missing Crossplane server
          crossplane version 2>/dev/null || true

      - name: Build Configuration package
        run: |
          echo "Building version: ${VERSION}"

          # Add version label to XRD only (crossplane.yaml has multi-line strings that yq corrupts)
          yq -i '.metadata.labels."openportal.dev/version" = env(VERSION)' configuration/xrd.yaml

          # Build the .xpkg file
          crossplane xpkg build \
            --package-root=configuration/ \
            --package-file=${{ needs.vars.outputs.name }}.xpkg

      - name: Push package to registry
        run: |
          # Push with version tag
          crossplane xpkg push \
            --package-files=${{ needs.vars.outputs.name }}.xpkg \
            ${{ env.PKG_PATH }}:${VERSION}
          
          # Also push as 'latest' if this is not a pre-release
          if [[ ! "${VERSION}" =~ - ]]; then
            crossplane xpkg push \
              --package-files=${{ needs.vars.outputs.name }}.xpkg \
              ${{ env.PKG_PATH }}:latest
          fi

  update-catalog:
    name: Update Catalog
    needs: [vars, build]
    # Only run for tag pushes, not manual dispatch
    if: github.event_name == 'push'
    uses: open-service-portal/catalog/.github/workflows/update-catalog-entry.yaml@main
    with:
      package-name: ${{ needs.vars.outputs.name }}
      version: ${{ needs.vars.outputs.version }}
      registry: ${{ needs.vars.outputs.registry }}
      organisation: ${{ needs.vars.outputs.organisation }}
    secrets: inherit

  create-release:
    name: Create GitHub Release
    needs: [vars, build, update-catalog]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    permissions:
      contents: write # For creating releases

    env:
      VERSION: ${{ needs.vars.outputs.version }}
      PKG_PATH: ${{ needs.vars.outputs.registry }}/${{ needs.vars.outputs.organisation }}/${{ needs.vars.outputs.name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Configuration DNS Record ${{ env.VERSION }}
          body: |
            ## DNS Record Configuration Package ${{ env.VERSION }}
            
            This release contains the Crossplane Configuration package for DNS record management.
            
            ### ðŸ“¦ Installation
            
            Install directly using kubectl:
            ```bash
            kubectl apply -f - <<EOF
            apiVersion: pkg.crossplane.io/v1
            kind: Configuration
            metadata:
              name: ${{ needs.vars.outputs.name }}
              namespace: crossplane-system
            spec:
              package:  ${{ env.PKG_PATH }}:${{ env.VERSION }}
            EOF
            ```
            
            Or use the catalog entry from the artifacts.
            
            ### ðŸ“‹ Package Details
            - **Registry**: ` ${{ env.PKG_PATH }}`
            - **Version**: `${{ env.VERSION }}`
            - **Supports**: Crossplane v2.0+
            - **Includes**: XRD + Composition for DNS records
            
            ### âœ¨ What's Included
            - Namespaced XRs for multi-tenant DNS management
            - Support for A, AAAA, CNAME, and TXT records
            - Mock provider for local development
            
            ### ðŸ”„ Catalog Update
            The catalog has been automatically updated with this release.
            - **Catalog PR**: ${{ needs.update-catalog.outputs.pr-url || 'Pending creation' }}
            
            ---
            *This release was automatically created by the release workflow.*
          draft: false
          prerelease: ${{ contains(needs.vars.outputs.version, '-') }}
